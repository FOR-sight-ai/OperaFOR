name: Build and Release Executables

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build ${{ matrix.os }} executable
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: macos
            arch: x64
            executable_name: operafor
            package_suffix: macos-x64
          - os: windows-latest
            platform: windows
            arch: x64
            executable_name: operafor.exe
            package_suffix: windows-x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          echo "Setting up macOS build environment"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install .

      - name: Get version from tag or pyproject.toml
        id: get_version
        shell: bash
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Build executable with PyInstaller
        run: |
          pyinstaller operafor.spec

      - name: Create package directory
        shell: bash
        run: |
          PACKAGE_DIR="operafor-executable-v${{ github.run_number }}-${{ matrix.package_suffix }}"
          mkdir -p "$PACKAGE_DIR"
          cp dist/${{ matrix.executable_name }} "$PACKAGE_DIR/"
          cp README.md "$PACKAGE_DIR/" || echo "README.md not found"
          cp LICENSE "$PACKAGE_DIR/" || echo "LICENSE not found"


      - name: Create archive
        shell: bash
        run: |
          PACKAGE_DIR="operafor-executable-v${{ github.run_number }}-${{ matrix.package_suffix }}"
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a "${PACKAGE_DIR}.zip" "$PACKAGE_DIR"
            echo "archive_name=${PACKAGE_DIR}.zip" >> $GITHUB_ENV
          else
            tar -czf "${PACKAGE_DIR}.tar.gz" "$PACKAGE_DIR"
            echo "archive_name=${PACKAGE_DIR}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: operafor-${{ matrix.package_suffix }}
          path: ${{ env.archive_name }}
          retention-days: 30

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -la ./artifacts/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: OperaFOR v${{ github.run_number }}
          body: |
            ## OperaFOR v${{ github.run_number }}

            Cross-platform executable release for OperaFOR.

            ### Downloads
            - **macOS (x64)**: `operafor-executable-v${{ github.run_number  }}-macos-x64.tar.gz`
            - **Windows (x64)**: `operafor-executable-v${{ github.run_number  }}-windows-x64.zip`

            ### Quick Start
            1. Download l'archive appropriée pour votre plateforme
            2. Décompressez l'archive
            3. Suivez les instructions dans `QUICKSTART.md`

            Pour la documentation détaillée, voir le [README](https://github.com/${{ github.repository }}/blob/main/README.md).
          draft: false
          prerelease: false


      - name: Upload macOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/operafor-macos-x64/operafor-executable-v${{ github.run_number  }}-macos-x64.tar.gz
          asset_name: operafor-executable-v${{ github.run_number  }}-macos-x64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/operafor-windows-x64/operafor-executable-v${{ github.run_number  }}-windows-x64.zip
          asset_name: operafor-executable-v${{ github.run_number }}-windows-x64.zip
          asset_content_type: application/zip
